version: 2.1

jobs:
  build:
    docker:
      - image: golang:alpine
    working_directory: /go/src/github.com/danackerson/ackerson.de-go
    steps:
      - checkout
      - run:
          name: "Fetch dependencies, build and test"
          command: |
            apk add -U curl build-base git

            go get github.com/gobuffalo/packr/v2/packr2
            go get github.com/jstemmer/go-junit-report
            mkdir -p /tmp/test-results

            go get -t -d -v ./...
            go test -v ./... | go-junit-report > /tmp/test-results/unit-tests.xml
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - setup_remote_docker
      - run:
          name: "Install Docker CE"
          command: |
            curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-$CTX_DOCKER_ENGINE_VERSION.tgz && tar --strip-components=1 -xvzf docker-$CTX_DOCKER_ENGINE_VERSION.tgz -C /usr/local/bin
            rm docker-$CTX_DOCKER_ENGINE_VERSION.tgz && rm -f /var/cache/apk/*
      - run:
          name: "Build & push docker image"
          command: |
            packr2
            env GOOS=linux GOARCH=386 go build -o homepage

            echo vc$CIRCLE_BUILD_NUM > last_docker_push

            docker build --compress -t danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM .
            docker login -u $CTX_DOCKER_USER -p $CTX_DOCKER_PASS
            docker tag danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM danackerson/ackerson.de:latest
            docker push danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM
            docker push danackerson/ackerson.de:latest

  deploy:
    docker:
        - image: google/cloud-sdk:alpine
    working_directory: ~/deploy
    steps:
      - run:
          name: Store Service Accounts
          command: |
            apk -u add jq
            echo $CTX_GOOGLE_DEPLOY_SERVICE_JSON > ${HOME}/gcloud-service-key.json
            chmod 600 $HOME/gcloud-service-key.json

            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${CTX_GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone europe-west3-c
      - run:
          name: Prepare deploy network access
          command: |
            ORIG_RANGE=`gcloud compute firewall-rules describe default-allow-ssh \
              --format=json | jq -r '.sourceRanges | @csv'`
            ORIG_RANGE=`echo ${ORIG_RANGE//\"}`
            echo $ORIG_RANGE > /tmp/orig_range.txt

            export DEPLOY_IP=`curl -s https://icanhazip.com`
            gcloud compute firewall-rules update default-allow-ssh \
              --source-ranges=$ORIG_RANGE,$DEPLOY_IP
      - run:
          name: "Prepare & deploy K8S config"
          command: |
            sed -i -e "s@{{HOMEPAGE_GCP_DOMAIN}}@$HOMEPAGE_GCP_DOMAIN@" homepage.yml
            sed -i -e "s@{{CIRCLE_BUILD_NUM}}@$CIRCLE_BUILD_NUM@" homepage.yml
            sed -i -e "s@{{CTX_JOIN_API_KEY}}@$CTX_JOIN_API_KEY@" homepage.yml
            sed -i -e "s@{{ACK_SECRET}}@$ackSecret@" homepage.yml
            sed -i -e "s@{{ACK_WUNDER}}@$ackWunder@" homepage.yml

            scp -o StrictHostKeyChecking=no homepage.yml ackersond@$K8S_SERVER:~/
            ssh ackersond@$K8S_SERVER -- "sudo kubectl apply -f homepage.yml"
      - run:
          name: Remove deploy network access
          command: |
            export ORIG_RANGE=`cat /tmp/orig_range.txt`
            if [ ! -z "$ORIG_RANGE" ]; then
              gcloud compute firewall-rules update default-allow-ssh \
                --source-ranges=$ORIG_RANGE
            fi
          when: always

workflows:
  build-deploy:
    jobs:
        - build:
            context: org-global
        - deploy:
            context: org-global
            requires:
              - build
