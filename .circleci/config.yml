version: 2
jobs:
  build:
    docker:
      - image: golang:1.8
    working_directory: /go/src/github.com/danackerson/ackerson.de-go
    steps:
      - checkout
      - setup_remote_docker:
          reusable: true
      - run:
          name: "Install Docker Engine"
          command: |
            set -x
            VER="17.05.0"
            curl -fsSLO https://get.docker.com/builds/Linux/x86_64/docker-$VER-ce.tgz && tar --strip-components=1 -xvzf docker-$VER-ce.tgz -C /usr/local/bin

            go get github.com/jstemmer/go-junit-report
            mkdir -p /tmp/test-results

      - run:
          name: "Fetch dependencies and test"
          command: |
            set -eu
            go get -t -d -v ./...
            go test -v -race ./... | go-junit-report > /tmp/test-results/unit-tests.xml
      - type: test-results-store
        path: /tmp/test-results

      - run:
          name: "Build, run and test docker image"
          command: |
            env GOOS=linux GOARCH=386 go build server.go
            docker build -t danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM .
            docker run -d -p 443:8443 -p 80:8080 -e prodSession=true --name ackerson.de danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM
            docker exec ackerson.de curl -k --retry 10 --retry-delay 5 -v https://localhost:8443/ | grep Ackerson

      - type: add-ssh-keys
        name: "Load key"
        fingerprints:
          - "93:c4:61:21:a6:82:d8:6d:4f:73:11:79:37:23:83:07"
      - run:
          name: Start ssh-agent
          command: |
            ssh-agent -s > ~/.ssh_agent_conf
            source ~/.ssh_agent_conf
            for _k in $(ls ${HOME}/.ssh/id_*); do
              ssh-add ${_k} || true
            done

      - deploy:
          name: "Upload to DockerHub, deploy container to Digital Ocean Droplet & launch"
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM

            source ~/.ssh_agent_conf
            ssh-add -l

            export DEPLOY_SERVER=deploy.ackerson.de
            if [ $DEPLOY_SERVER_IP ]; then
              export DEPLOY_SERVER=$DEPLOY_SERVER_IP
            fi
            echo "Deploy to $DEPLOY_SERVER"

            export DEPLOY_CONNECT="ssh -o StrictHostKeyChecking=no ackersond@$DEPLOY_SERVER"
            $DEPLOY_CONNECT docker pull danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM
            $DEPLOY_CONNECT docker rm -f ackerson.de || true
            $DEPLOY_CONNECT docker run -d --restart=always -p 443:8443 -p 80:8080 -e CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM -e prodSession=true -e joinAPIKey=$joinAPIKey -e ackSecret=$ackSecret -e ackWunder=$ackWunder -v /home/ackersond/certs:/root/certs:ro -v /app/public --name ackerson.de danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM
                          
            if [ $DEPLOY_SERVER_IP ]; then
              # Need to create new SSL cert for the new server instance
              $DEPLOY_CONNECT docker run -d --name letsencrypt --volumes-from ackerson.de quay.io/letsencrypt/letsencrypt certonly --non-interactive --text --agree-tos --webroot --no-eff-email --webroot-path /app/public -m dan@ackerson.de -d ackerson.de
              $DEPLOY_CONNECT sleep 30 # wait for letsencrypt to verify ackerson.de and generate SSL cert
              $DEPLOY_CONNECT docker cp letsencrypt:/etc/letsencrypt/ ./letsencrypt
              $DEPLOY_CONNECT sudo cp ./letsencrypt/archive/ackerson.de/fullchain1.pem /home/ackersond/certs/server.pem
              $DEPLOY_CONNECT sudo cp ./letsencrypt/archive/ackerson.de/privkey1.pem /home/ackersond/certs/server.key
              $DEPLOY_CONNECT docker rm -f letsencrypt && docker restart ackerson.de
                
              # BenderBot also needs to be deployed to new server
              curl --user ${CIRCLE_API_TOKEN}: \
                --data build_parameters[DEPLOY_SERVER_IP]=$NEW_SERVER_IPV4 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/bender-slackbot/tree/master
            fi
