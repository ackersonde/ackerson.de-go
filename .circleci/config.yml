version: 2
jobs:
  build:
    docker:
      - image: golang:alpine
    working_directory: /go/src/github.com/danackerson/ackerson.de-go
    steps:
      - checkout
      - run:
          name: "Fetch dependencies, build and test"
          command: |
            apk add -U curl build-base git

            go get github.com/jstemmer/go-junit-report
            mkdir -p /tmp/test-results

            go get -t -d -v ./...
            go test -v ./... | go-junit-report > /tmp/test-results/unit-tests.xml
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - setup_remote_docker
      - run:
          name: "Install Docker CE"
          command: |
            VER="18.09.0"
            curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz && tar --strip-components=1 -xvzf docker-$VER.tgz -C /usr/local/bin
            rm docker-$VER.tgz && rm -f /var/cache/apk/*

      - run:
          name: "Build & push docker image"
          command: |
            env GOOS=linux GOARCH=386 go build server.go
            docker build --compress -t danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM danackerson/ackerson.de:latest
            docker push danackerson/ackerson.de:vc$CIRCLE_BUILD_NUM
            docker push danackerson/ackerson.de:latest
            echo vc$CIRCLE_BUILD_NUM > last_docker_push

      - persist_to_workspace:
          root: /go/src/github.com/danackerson/ackerson.de-go
          paths:
            - last_docker_push

  deploy:
    docker:
      - image: alpine
    steps:
      - add-ssh-keys:
          fingerprints:
            - "93:c4:61:21:a6:82:d8:6d:4f:73:11:79:37:23:83:07"

      - run:
          name: Disable Digital Ocean firewall for deploy
          command: |
            apk add -U jq ca-certificates curl openssh-client
            curl -s https://raw.githubusercontent.com/danackerson/digitalocean/master/utils/disableFW.sh | sh

      - attach_workspace:
          at: /tmp

      - run:
          name: "Upload to DockerHub, deploy container to Digital Ocean Droplet & launch"
          command: |
            export DEPLOY_SERVER=deploy.ackerson.de
            if [ $DEPLOY_SERVER_IP ]; then
              export DEPLOY_SERVER=$DEPLOY_SERVER_IP
            fi
            echo "Deploying to $DEPLOY_SERVER..."

            ssh-add -l
            ssh-keyscan $DEPLOY_SERVER >> ~/.ssh/known_hosts
            export DEPLOY_CONNECT="ssh -vvv ackersond@$DEPLOY_SERVER"

            if [ -f /tmp/last_docker_push ]; then
              export LAST_DOCKER_PUSH=`cat /tmp/last_docker_push`
            else
              export LAST_DOCKER_PUSH=latest
            fi
            $DEPLOY_CONNECT docker pull danackerson/ackerson.de:$LAST_DOCKER_PUSH

            export DOCKER_RUN="docker run -d --restart=always --network='web' \
              -e CIRCLE_BUILD_NUM=$LAST_DOCKER_PUSH -e joinAPIKey=$joinAPIKey \
              -e ackSecret=$ackSecret -e ackWunder=$ackWunder \
              --label='traefik.backend=homepage' \
              --label='traefik.docker.network=web' \
              --label='traefik.frontend.rule=Host:ackerson.de,www.ackerson.de' \
              --label='traefik.enable=true' \
              --label='traefik.port=8080' \
              -v data-volume:/app/public/downloads \
              --name homepage danackerson/ackerson.de:$LAST_DOCKER_PUSH"

            if [ $DEPLOY_SERVER_IP ]; then
              $DEPLOY_CONNECT $DOCKER_RUN
            else
              $DEPLOY_CONNECT docker rm -f homepage || true
              $DEPLOY_CONNECT $DOCKER_RUN
            fi

      - run:
          name: Reenable Digital Ocean firewall
          command: |
            if [ -z $DEPLOY_SERVER_IP ]; then
              curl -s https://raw.githubusercontent.com/danackerson/digitalocean/master/utils/reenableFW.sh | sh
            fi
          when: always

workflows:
  version: 2
  build-deploy:
    jobs:
        - build
        - deploy:
            requires:
              - build
