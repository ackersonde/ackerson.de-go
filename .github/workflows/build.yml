name: Deploy ackerson.de homepage

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Test application
        run: |
          go mod init ackerson.de-go
          go get -u github.com/gobuffalo/packr/v2/packr2
          go get -u github.com/jstemmer/go-junit-report

          go get -t -d -v ./...

          mkdir -p /tmp/test-results
          export `go env | grep GOPATH | tr -d \"`
          go test -v ./... | $GOPATH/bin/go-junit-report > /tmp/test-results/unit-tests.xml
      - name: Upload & archive test results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: /tmp/test-results/unit-tests.xml
      - name: Build application and docker image
        run: |
          export `go env | grep GOPATH | tr -d \"`
          $GOPATH/bin/packr2
          env GOOS=linux GOARCH=arm GOARM=7 go build -o homepage

          docker run --rm --privileged multiarch/qemu-user-static:register
          docker build --compress -t danackerson/ackerson.de:vg$GITHUB_RUN_ID .
          docker login -u ${{ secrets.CTX_DOCKER_USER }} -p ${{ secrets.CTX_DOCKER_PASS }}
          docker tag danackerson/ackerson.de:vg$GITHUB_RUN_ID danackerson/ackerson.de:latest
          docker push danackerson/ackerson.de:vg$GITHUB_RUN_ID
          docker push danackerson/ackerson.de:latest

      - name: Prepare K8S bundle config
        run: |
          export GITHUB_RUN_ID_B64=`echo -n $GITHUB_RUN_ID | base64`
          sed -i -e "s@{{GITHUB_RUN_ID_B64}}@$GITHUB_RUN_ID_B64@" homepage.yml
          sed -i -e "s@{{GITHUB_RUN_ID}}@$GITHUB_RUN_ID@" homepage.yml

          echo -n "${{ secrets.COOKIE_SECRET }}" | base64 | tr -d \\n > .base64_enc
          export COOKIE_SECRET_B64=`cat .base64_enc`
          sed -i -e "s@{{COOKIE_SECRET_B64}}@$COOKIE_SECRET_B64@" homepage.yml

          echo -n "${{ secrets.CTX_DARKSKY_API_KEY }}" | base64 | tr -d \\n > .base64_enc
          export DARKSKY_API_KEY_B64=`cat .base64_enc`
          sed -i -e "s@{{DARKSKY_API_KEY_B64}}@$DARKSKY_API_KEY_B64@" homepage.yml

          echo -n "${{ secrets.CTX_JOIN_API_KEY }}" | base64 | tr -d \\n > .base64_enc
          export CTX_JOIN_API_KEY_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_JOIN_API_KEY_B64}}@$CTX_JOIN_API_KEY_B64@" homepage.yml

          echo -n "${{ secrets.CTX_DROPBOX_ACCESS_TOKEN }}" | base64 | tr -d \\n > .base64_enc
          export CTX_DROPBOX_ACCESS_TOKEN_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_DROPBOX_ACCESS_TOKEN_B64}}@$CTX_DROPBOX_ACCESS_TOKEN_B64@" homepage.yml

          sed -i -e "s@{{HOMEPAGE_HOSTNAME}}@${{ secrets.HOMEPAGE_HOSTNAME }}@g" homepage.yml
          rm .base64_enc

      - name: Create wireguard tunnel configuration
        run: |
          sudo apt-get install wireguard

          curl -O https://raw.githubusercontent.com/ackersonde/traefik2_k3s/master/tunnel.conf
          sed -i -e "s@{{CTX_WIREGUARD_PRIVATE_KEY}}@${{ secrets.CTX_WIREGUARD_PRIVATE_KEY }}@" tunnel.conf
          sed -i -e "s@{{CTX_WIREGUARD_SERVER_PUBLIC_KEY}}@${{ secrets.CTX_WIREGUARD_SERVER_PUBLIC_KEY }}@" tunnel.conf
          sed -i -e "s@{{CTX_WIREGUARD_PRESHARED_KEY}}@${{ secrets.CTX_WIREGUARD_PRESHARED_KEY }}@" tunnel.conf
          sed -i -e "s@{{CTX_WIREGUARD_SERVER_ENDPOINT}}@${{ secrets.CTX_WIREGUARD_SERVER_ENDPOINT }}@" tunnel.conf
          sudo mv tunnel.conf /etc/wireguard/

      - name: Prepare ssh key for remote login
        run: |
          mkdir ~/.ssh/
          echo "${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}" | base64 -d > ~/.ssh/id_rsa-cert.pub

      - name: Deploy to K8S
        env:
          SSH_CXN: ${{ secrets.CTX_K8S_SSH_USER }}@${{ secrets.CTX_K8S_SSH_HOST }}
        run: |
          wg-quick up tunnel

          scp -o StrictHostKeyChecking=no homepage.yml $SSH_CXN:~/k3s/
          ssh $SSH_CXN -- "sudo kubectl apply -f k3s/homepage.yml"

          wg-quick down tunnel

          curl -s -F token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -F channel=C092UE0H4 \
            -F text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY>" \
            https://slack.com/api/chat.postMessage
