name: Deploy ackerson.de homepage

on:
  push:
    branches: [ docker ]

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN: ${{ secrets.CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN }}
      CTX_DIGITALOCEAN_FIREWALL: ${{ secrets.CTX_DIGITALOCEAN_FIREWALL }}
      CTX_SSH_DEPLOY_FINGERPRINT: ${{ secrets.CTX_SSH_DEPLOY_FINGERPRINT }}
      CTX_RASPBERRYPI_SSH_PRIVKEY: "${{ secrets.CTX_RASPBERRYPI_SSH_PRIVKEY }}"
      SSH_CXN: ${{ secrets.CTX_IPV6_MASTER_HOME }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Test application
        run: |
          go mod tidy
          go get -u github.com/gobuffalo/packr/v2/packr2
          go get -u github.com/jstemmer/go-junit-report

          mkdir -p /tmp/test-results
          export `go env | grep GOPATH | tr -d \"`
          go test -v ./... | $GOPATH/bin/go-junit-report > /tmp/test-results/unit-tests.xml
      - name: Upload & archive test results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: /tmp/test-results/unit-tests.xml

      - name: Build application and docker image
        run: |
          export `go env | grep GOPATH | tr -d \"`
          $GOPATH/bin/packr2
          env GOOS=linux GOARCH=arm GOARM=7 go build -o homepage

          docker run --rm --privileged multiarch/qemu-user-static:register
          docker build --compress -t danackerson/ackerson.de:vg$GITHUB_RUN_ID .
          docker login -u ${{ secrets.CTX_DOCKER_USER }} -p ${{ secrets.CTX_DOCKER_PASS }}
          docker tag danackerson/ackerson.de:vg$GITHUB_RUN_ID danackerson/ackerson.de:latest
          docker push danackerson/ackerson.de:vg$GITHUB_RUN_ID
          docker push danackerson/ackerson.de:latest

      - name: Deploy to Pi
        run: |
          git clone https://github.com/ackersonde/digitaloceans.git
          cd digitaloceans
          go get -t -d -v ./...
          go build do.go
          cd ../

          cat <<DEPLOY_EOF >deploy.sh
          #!/usr/bin/bash
          ssh -o StrictHostKeyChecking=no ubuntu@$SSH_CXN "\
            docker run -d --restart=always --network='web' \
              -e DARKSKY_API_KEY=${{ secrets.CTX_DARKSKY_API_KEY }} \
              -e GITHUB_RUN_ID=$GITHUB_RUN_ID \
              -e COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} \
              -e CTX_JOIN_API_KEY=${{ secrets.CTX_JOIN_API_KEY }} \
              --label='traefik.backend=homepage' \
              --label='traefik.docker.network=web' \
              --label='traefik.frontend.passHostHeader=true'
              --label='traefik.frontend.rule=Host:ackerson.de,www.ackerson.de' \
              --label='traefik.enable=true' \
              --label='traefik.port=8080' \
              -v data-volume:/app/public/downloads \
              --name homepage danackerson/ackerson.de:vg$GITHUB_RUN_ID"
          DEPLOY_EOF
          chmod u+x deploy.sh

          envsubst < digitaloceans/do_ubuntu_userdata.sh > digitalocean_ubuntu_userdata.sh
          mkdir ~/.ssh
          ./digitaloceans/do -fn=createNewServer

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          echo PUBLIC_IP=${public_ip_address} >> /tmp/new_digital_ocean_droplet_params
          source /tmp/new_digital_ocean_droplet_params

          ./digitaloceans/do -fn=firewallSSH -allow=true -ip=$public_ip_address
          sleep 30

          scp -q -o StrictHostKeyChecking=no deploy.sh root@$NEW_SERVER_IPV4:~/
          ssh root@$NEW_SERVER_IPV4 ./deploy.sh

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage

          rm -Rf ~/.ssh/id_rsa digitalocean_ubuntu_userdata.sh /tmp/new_digital_ocean_droplet_params
          ./digitaloceans/do -fn=firewallSSH -allow=false -ip=$PUBLIC_IP
          ./digitaloceans/do -fn=deleteServer -dropletID=$NEW_DROPLET_ID -keyID=$NEW_SSH_KEY_ID
